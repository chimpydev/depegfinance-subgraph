// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Farm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Farm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Farm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Farm", id.toString(), this);
    }
  }

  static load(id: string): Farm | null {
    return changetype<Farm | null>(store.get("Farm", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }

  get epochId(): string {
    let value = this.get("epochId");
    return value!.toString();
  }

  set epochId(value: string) {
    this.set("epochId", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value!.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get duration(): i32 {
    let value = this.get("duration");
    return value!.toI32();
  }

  set duration(value: i32) {
    this.set("duration", Value.fromI32(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get vaultAddress(): Bytes {
    let value = this.get("vaultAddress");
    return value!.toBytes();
  }

  set vaultAddress(value: Bytes) {
    this.set("vaultAddress", Value.fromBytes(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }

  get endEpoch(): i32 {
    let value = this.get("endEpoch");
    return value!.toI32();
  }

  set endEpoch(value: i32) {
    this.set("endEpoch", Value.fromI32(value));
  }

  get startEpoch(): i32 {
    let value = this.get("startEpoch");
    return value!.toI32();
  }

  set startEpoch(value: i32) {
    this.set("startEpoch", Value.fromI32(value));
  }
}

export class FarmPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FarmPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FarmPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FarmPosition", id.toString(), this);
    }
  }

  static load(id: string): FarmPosition | null {
    return changetype<FarmPosition | null>(store.get("FarmPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get farmId(): string {
    let value = this.get("farmId");
    return value!.toString();
  }

  set farmId(value: string) {
    this.set("farmId", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }

  get epochId(): string {
    let value = this.get("epochId");
    return value!.toString();
  }

  set epochId(value: string) {
    this.set("epochId", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value!.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get endEpoch(): i32 {
    let value = this.get("endEpoch");
    return value!.toI32();
  }

  set endEpoch(value: i32) {
    this.set("endEpoch", Value.fromI32(value));
  }

  get startEpoch(): i32 {
    let value = this.get("startEpoch");
    return value!.toI32();
  }

  set startEpoch(value: i32) {
    this.set("startEpoch", Value.fromI32(value));
  }

  get duration(): i32 {
    let value = this.get("duration");
    return value!.toI32();
  }

  set duration(value: i32) {
    this.set("duration", Value.fromI32(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }
}

export class EpochIdMapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpochIdMapping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochIdMapping must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpochIdMapping", id.toString(), this);
    }
  }

  static load(id: string): EpochIdMapping | null {
    return changetype<EpochIdMapping | null>(store.get("EpochIdMapping", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epochId(): string {
    let value = this.get("epochId");
    return value!.toString();
  }

  set epochId(value: string) {
    this.set("epochId", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class EpochVault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpochVault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochVault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpochVault", id.toString(), this);
    }
  }

  static load(id: string): EpochVault | null {
    return changetype<EpochVault | null>(store.get("EpochVault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (!value) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(<BigInt>value));
    }
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get isOngoing(): boolean {
    let value = this.get("isOngoing");
    return value!.toBoolean();
  }

  set isOngoing(value: boolean) {
    this.set("isOngoing", Value.fromBoolean(value));
  }

  get isResolved(): boolean {
    let value = this.get("isResolved");
    return value!.toBoolean();
  }

  set isResolved(value: boolean) {
    this.set("isResolved", Value.fromBoolean(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get epochId(): string {
    let value = this.get("epochId");
    return value!.toString();
  }

  set epochId(value: string) {
    this.set("epochId", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }

  get tokenAdress(): Bytes {
    let value = this.get("tokenAdress");
    return value!.toBytes();
  }

  set tokenAdress(value: Bytes) {
    this.set("tokenAdress", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get isFarming(): boolean {
    let value = this.get("isFarming");
    return value!.toBoolean();
  }

  set isFarming(value: boolean) {
    this.set("isFarming", Value.fromBoolean(value));
  }

  get farmId(): string | null {
    let value = this.get("farmId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set farmId(value: string | null) {
    if (!value) {
      this.unset("farmId");
    } else {
      this.set("farmId", Value.fromString(<string>value));
    }
  }

  get endEpoch(): i32 {
    let value = this.get("endEpoch");
    return value!.toI32();
  }

  set endEpoch(value: i32) {
    this.set("endEpoch", Value.fromI32(value));
  }

  get startEpoch(): i32 {
    let value = this.get("startEpoch");
    return value!.toI32();
  }

  set startEpoch(value: i32) {
    this.set("startEpoch", Value.fromI32(value));
  }

  get farmAddress(): Bytes | null {
    let value = this.get("farmAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set farmAddress(value: Bytes | null) {
    if (!value) {
      this.unset("farmAddress");
    } else {
      this.set("farmAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }

  get tokenAdress(): Bytes {
    let value = this.get("tokenAdress");
    return value!.toBytes();
  }

  set tokenAdress(value: Bytes) {
    this.set("tokenAdress", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hedgeVault(): Bytes {
    let value = this.get("hedgeVault");
    return value!.toBytes();
  }

  set hedgeVault(value: Bytes) {
    this.set("hedgeVault", Value.fromBytes(value));
  }

  get riskVault(): Bytes {
    let value = this.get("riskVault");
    return value!.toBytes();
  }

  set riskVault(value: Bytes) {
    this.set("riskVault", Value.fromBytes(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }
}

export class Epoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Epoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Epoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Epoch", id.toString(), this);
    }
  }

  static load(id: string): Epoch | null {
    return changetype<Epoch | null>(store.get("Epoch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hedgeVault(): Bytes {
    let value = this.get("hedgeVault");
    return value!.toBytes();
  }

  set hedgeVault(value: Bytes) {
    this.set("hedgeVault", Value.fromBytes(value));
  }

  get riskVault(): Bytes {
    let value = this.get("riskVault");
    return value!.toBytes();
  }

  set riskVault(value: Bytes) {
    this.set("riskVault", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get marketName(): string {
    let value = this.get("marketName");
    return value!.toString();
  }

  set marketName(value: string) {
    this.set("marketName", Value.fromString(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value!.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get formattedStrikePrice(): string {
    let value = this.get("formattedStrikePrice");
    return value!.toString();
  }

  set formattedStrikePrice(value: string) {
    this.set("formattedStrikePrice", Value.fromString(value));
  }

  get marketIndex(): string {
    let value = this.get("marketIndex");
    return value!.toString();
  }

  set marketIndex(value: string) {
    this.set("marketIndex", Value.fromString(value));
  }

  get startEpoch(): i32 {
    let value = this.get("startEpoch");
    return value!.toI32();
  }

  set startEpoch(value: i32) {
    this.set("startEpoch", Value.fromI32(value));
  }

  get endEpoch(): i32 {
    let value = this.get("endEpoch");
    return value!.toI32();
  }

  set endEpoch(value: i32) {
    this.set("endEpoch", Value.fromI32(value));
  }

  get isDeppeged(): boolean {
    let value = this.get("isDeppeged");
    return value!.toBoolean();
  }

  set isDeppeged(value: boolean) {
    this.set("isDeppeged", Value.fromBoolean(value));
  }

  get epochEnded(): boolean {
    let value = this.get("epochEnded");
    return value!.toBoolean();
  }

  set epochEnded(value: boolean) {
    this.set("epochEnded", Value.fromBoolean(value));
  }

  get withdrawalFee(): i32 {
    let value = this.get("withdrawalFee");
    return value!.toI32();
  }

  set withdrawalFee(value: i32) {
    this.set("withdrawalFee", Value.fromI32(value));
  }

  get triggredAt(): BigInt | null {
    let value = this.get("triggredAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set triggredAt(value: BigInt | null) {
    if (!value) {
      this.unset("triggredAt");
    } else {
      this.set("triggredAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get depegPrice(): BigInt | null {
    let value = this.get("depegPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depegPrice(value: BigInt | null) {
    if (!value) {
      this.unset("depegPrice");
    } else {
      this.set("depegPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get RISK_claimTVL(): BigInt | null {
    let value = this.get("RISK_claimTVL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set RISK_claimTVL(value: BigInt | null) {
    if (!value) {
      this.unset("RISK_claimTVL");
    } else {
      this.set("RISK_claimTVL", Value.fromBigInt(<BigInt>value));
    }
  }

  get RISK_finalTVL(): BigInt | null {
    let value = this.get("RISK_finalTVL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set RISK_finalTVL(value: BigInt | null) {
    if (!value) {
      this.unset("RISK_finalTVL");
    } else {
      this.set("RISK_finalTVL", Value.fromBigInt(<BigInt>value));
    }
  }

  get INSR_claimTVL(): BigInt | null {
    let value = this.get("INSR_claimTVL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set INSR_claimTVL(value: BigInt | null) {
    if (!value) {
      this.unset("INSR_claimTVL");
    } else {
      this.set("INSR_claimTVL", Value.fromBigInt(<BigInt>value));
    }
  }

  get INSR_finalTVL(): BigInt | null {
    let value = this.get("INSR_finalTVL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set INSR_finalTVL(value: BigInt | null) {
    if (!value) {
      this.unset("INSR_finalTVL");
    } else {
      this.set("INSR_finalTVL", Value.fromBigInt(<BigInt>value));
    }
  }
}
